{"version":3,"file":"attributes.js","sourceRoot":"","sources":["../../../src/utils/attributes.ts"],"names":[],"mappings":"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","sourcesContent":["import { SpanAttributes, SpanStatus, SpanStatusCode } from '@opentelemetry/api';\nimport {\n    SEMATTRS_HTTP_FLAVOR,\n    SEMATTRS_HTTP_HOST,\n    SEMATTRS_HTTP_METHOD,\n    SEMATTRS_HTTP_ROUTE,\n    SEMATTRS_HTTP_SCHEME,\n    SEMATTRS_HTTP_STATUS_CODE,\n    SEMATTRS_HTTP_TARGET,\n    SEMATTRS_NET_PEER_IP,\n    SemanticAttributes,\n} from '@opentelemetry/semantic-conventions';\nimport { ExpressConsumedRouteState, ExpressInstrumentationAttributes } from '../types';\nimport type express from 'express';\n\nexport const getRouteAttributes = (routeState: ExpressConsumedRouteState): SpanAttributes => {\n    const attributes: SpanAttributes = {};\n\n    const resolvedRoute = getResolvedRoute(routeState);\n    if (resolvedRoute != null) {\n        attributes[SEMATTRS_HTTP_ROUTE] = resolvedRoute;\n    }\n\n    const fullRoute = getFullRoute(routeState);\n    if (fullRoute) {\n        attributes[ExpressInstrumentationAttributes.EXPRESS_ROUTE_FULL] = fullRoute;\n    }\n\n    const configuredRoute = getConfiguredRoute(routeState);\n    if (configuredRoute != null) {\n        attributes[ExpressInstrumentationAttributes.EXPRESS_ROUTE_CONFIGURED] = configuredRoute;\n    }\n\n    if (typeof routeState?.params === 'object') {\n        attributes[ExpressInstrumentationAttributes.EXPRESS_ROUTE_PARAMS] = JSON.stringify(routeState.params);\n    }\n\n    if (routeState?.isUnhandled) {\n        attributes[ExpressInstrumentationAttributes.EXPRESS_UNHANDLED] = true;\n    }\n\n    if (routeState?.errors) {\n        attributes[ExpressInstrumentationAttributes.EXPRESS_INSTRUMENTATION_ERRORS] = JSON.stringify(routeState.errors);\n    }\n\n    return attributes;\n};\n\n// might contain data with high cardinality, such as ids etc.\n// this might happen on early termination due to authorization middlewares etc.\nexport const getFullRoute = (expressRoutState: ExpressConsumedRouteState): string => {\n    // exit when missing\n    if (!expressRoutState) return;\n\n    // exit when missing\n    if (expressRoutState.resolvedRoute == null || expressRoutState.remainingRoute == null) return;\n\n    return expressRoutState.resolvedRoute + expressRoutState.remainingRoute;\n};\n\nconst getConfiguredRoute = (expressRoutState: ExpressConsumedRouteState): string => expressRoutState?.configuredRoute;\n\nexport const getResolvedRoute = (expressRoutContext: ExpressConsumedRouteState): string =>\n    expressRoutContext?.resolvedRoute;\n\nexport const getHttpSpanAttributeFromRes = (res: express.Response): SpanAttributes => {\n    return {\n        [SEMATTRS_HTTP_STATUS_CODE]: res.statusCode,\n    };\n};\n\nexport const getSpanNameOnResEnd = (req: express.Request, routeState: ExpressConsumedRouteState): string => {\n    // route.path will give use\n    const method = req?.method?.toUpperCase();\n    const route = getResolvedRoute(routeState);\n    if (!method || !route) return undefined;\n    return `${method} ${route}`;\n};\n\nexport const getSpanInitialName = (req: express.Request): string => {\n    return `${req?.method?.toUpperCase() ?? ''} ${req?.path ?? ''}`;\n};\n\nexport const createHostAttribute = (req: express.Request): string => {\n    // prefer to use host from incoming headers\n    const hostHeader = req.headers?.host;\n    if (hostHeader) return hostHeader;\n\n    // if not available, construct it from parts\n    const hostname = req.hostname ?? 'localhost';\n    return hostname;\n};\n\nexport const getHttpSpanAttributesFromReq = (req: express.Request): SpanAttributes => {\n    return {\n        [SEMATTRS_HTTP_METHOD]: req.method.toUpperCase(),\n        [SEMATTRS_HTTP_TARGET]: req.originalUrl,\n        [SEMATTRS_HTTP_FLAVOR]: req.httpVersion,\n        [SEMATTRS_HTTP_HOST]: createHostAttribute(req),\n        [SEMATTRS_HTTP_SCHEME]: req.protocol,\n        [SEMATTRS_NET_PEER_IP]: req.ip,\n    };\n};\n\n// from @opentelemetry/instrumentation-http\n// https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-instrumentation-http/src/utils.ts#L70\nexport const parseResponseStatus = (statusCode: number): Omit<SpanStatus, 'message'> => {\n    // 1xx, 2xx, 3xx are OK\n    if (statusCode >= 100 && statusCode < 400) {\n        return { code: SpanStatusCode.OK };\n    }\n\n    // All other codes are error\n    return { code: SpanStatusCode.ERROR };\n};\n"]}